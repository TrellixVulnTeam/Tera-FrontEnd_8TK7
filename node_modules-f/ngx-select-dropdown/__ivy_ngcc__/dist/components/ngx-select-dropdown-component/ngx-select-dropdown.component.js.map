{"version":3,"file":"ngx-select-dropdown.component.js","sources":["ngx-select-dropdown.component.js"],"names":[],"mappingscM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAM;AACN;AACA;AACA;AACA","sourcesContent":["var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { ArrayFilterPipe } from \"./../../pipes/filter-by.pipe\";\nimport { Component, Input, EventEmitter, Output, HostListener, ViewChildren, ElementRef, ChangeDetectorRef, forwardRef, } from \"@angular/core\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nvar SelectDropDownComponent = /** @class */ (function () {\n    function SelectDropDownComponent(cdref, _elementRef) {\n        this.cdref = cdref;\n        this._elementRef = _elementRef;\n        /**\n         * Get the required inputs\n         */\n        this.options = [];\n        /**\n         * configuration options\n         */\n        this.config = {};\n        /**\n         * Whether multiple selection or single selection allowed\n         */\n        this.multiple = false;\n        /**\n         * change event when value changes to provide user to handle things in change event\n         */\n        this.change = new EventEmitter();\n        /**\n         * The search text change event emitter emitted when user type in the search input\n         */\n        this.searchChange = new EventEmitter();\n        /**\n         * Event emitted when dropdown is open.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Event emitted when dropdown is open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Toogle the dropdown list\n         */\n        this.toggleDropdown = false;\n        /**\n         * Available items for selection\n         */\n        this.availableItems = [];\n        /**\n         * Selected Items\n         */\n        this.selectedItems = [];\n        /**\n         * Selection text to be Displayed\n         */\n        this.selectedDisplayText = \"Select\";\n        /**\n         * variable to track if clicked inside or outside of component\n         */\n        this.clickedInside = false;\n        /**\n         * variable to track keypress event inside and outsid of component\n         */\n        this.insideKeyPress = false;\n        /**\n         * variable to track the focused item whenuser uses arrow keys to select item\n         */\n        this.focusedItemIndex = null;\n        /**\n         * element to show not found text when not itmes match the search\n         */\n        this.showNotFound = false;\n        this.onChange = function () {\n            // empty\n        };\n        this.onTouched = function () {\n            // empty\n        };\n        this.multiple = false;\n    }\n    Object.defineProperty(SelectDropDownComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (val) {\n            this._value = val;\n            this.onChange(val);\n            this.onTouched();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * click listener for host inside this component i.e\n     * if many instances are there, this detects if clicked inside\n     * this instance\n     */\n    SelectDropDownComponent.prototype.clickInsideComponent = function () {\n        this.clickedInside = true;\n    };\n    SelectDropDownComponent.prototype.blur = function () {\n        this.toggleDropdown = false;\n    };\n    SelectDropDownComponent.prototype.focus = function () {\n        /* istanbul ignore else */\n        if (!this.disabled) {\n            this.toggleSelectDropdown();\n        }\n    };\n    /**\n     * click handler on documnent to hide the open dropdown if clicked outside\n     */\n    SelectDropDownComponent.prototype.clickOutsideComponent = function () {\n        /* istanbul ignore else */\n        if (!this.clickedInside) {\n            this.toggleDropdown = false;\n            this.resetArrowKeyActiveElement();\n            // clear searh on close\n            this.searchText = null;\n            this.close.emit();\n        }\n        this.clickedInside = false;\n    };\n    /**\n     * click handler on documnent to hide the open dropdown if clicked outside\n     */\n    SelectDropDownComponent.prototype.KeyPressOutsideComponent = function () {\n        /* istanbul ignore else */\n        if (!this.insideKeyPress) {\n            this.toggleDropdown = false;\n            this.resetArrowKeyActiveElement();\n        }\n        this.insideKeyPress = false;\n    };\n    /**\n     * Event handler for key up and down event and enter press for selecting element\n     * @param event\n     */\n    SelectDropDownComponent.prototype.handleKeyboardEvent = function ($event) {\n        this.insideKeyPress = true;\n        /* istanbul ignore else */\n        if ($event.keyCode === 27 || this.disabled) {\n            this.toggleDropdown = false;\n            this.insideKeyPress = false;\n            return;\n        }\n        var avaOpts = this.availableOptions.toArray();\n        /* istanbul ignore else */\n        if ($event.keyCode !== 9 && avaOpts.length === 0 && !this.toggleDropdown) {\n            this.toggleDropdown = true;\n        }\n        // Arrow Down\n        /* istanbul ignore else */\n        if ($event.keyCode === 40 && avaOpts.length > 0) {\n            this.onArrowKeyDown();\n            /* istanbul ignore else */\n            if (this.focusedItemIndex >= avaOpts.length) {\n                this.focusedItemIndex = 0;\n            }\n            avaOpts[this.focusedItemIndex].nativeElement.focus();\n            $event.preventDefault();\n        }\n        // Arrow Up\n        /* istanbul ignore else */\n        if ($event.keyCode === 38 && avaOpts.length) {\n            this.onArrowKeyUp();\n            /* istanbul ignore else */\n            if (this.focusedItemIndex >= avaOpts.length) {\n                this.focusedItemIndex = avaOpts.length - 1;\n            }\n            avaOpts[this.focusedItemIndex].nativeElement.focus();\n            $event.preventDefault();\n        }\n        // Enter\n        /* istanbul ignore else */\n        if ($event.keyCode === 13 && this.focusedItemIndex !== null) {\n            var filteredItems = new ArrayFilterPipe().transform(this.availableItems, this.searchText, this.config.searchOnKey);\n            this.selectItem(filteredItems[this.focusedItemIndex], this.availableItems.indexOf(filteredItems[this.focusedItemIndex]));\n            return false;\n        }\n    };\n    /**\n     * Component onInit\n     */\n    SelectDropDownComponent.prototype.ngOnInit = function () {\n        /* istanbul ignore else */\n        if (typeof this.options !== \"undefined\" && Array.isArray(this.options)) {\n            this.availableItems = this.options.sort(this.config.customComparator).slice();\n            this.initDropdownValuesAndOptions();\n        }\n    };\n    /**\n     * after view init to subscribe to available option changes\n     */\n    SelectDropDownComponent.prototype.ngAfterViewInit = function () {\n        this.availableOptions.changes.subscribe(this.setNotFoundState.bind(this));\n    };\n    SelectDropDownComponent.prototype.registerOnChange = function (fn) {\n        this.onChange = fn;\n    };\n    SelectDropDownComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    SelectDropDownComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    SelectDropDownComponent.prototype.writeValue = function (value, internal) {\n        if (value) {\n            if (Array.isArray(value)) {\n                if (this.multiple) {\n                    this.value = value;\n                }\n                else if (value.length > 0) {\n                    this.value = value[0];\n                }\n            }\n            else {\n                this.value = value;\n            }\n            /* istanbul ignore else */\n            if (this.selectedItems.length === 0) {\n                if (Array.isArray(value)) {\n                    this.selectedItems = value;\n                }\n                else {\n                    this.selectedItems.push(value);\n                }\n                this.initDropdownValuesAndOptions();\n            }\n        }\n        else {\n            this.value = [];\n            /* istanbul ignore else */\n            if (!internal) {\n                this.reset();\n            }\n        }\n        /* istanbul ignore else */\n        if (!internal) {\n            this.reset();\n        }\n    };\n    SelectDropDownComponent.prototype.reset = function () {\n        this.selectedItems = [];\n        this.availableItems = this.options.sort(this.config.customComparator).slice();\n        this.initDropdownValuesAndOptions();\n    };\n    /**\n     * function sets whether to show items not found text or not\n     */\n    SelectDropDownComponent.prototype.setNotFoundState = function () {\n        if (this.availableOptions.length === 0) {\n            this.showNotFound = true;\n        }\n        else {\n            this.showNotFound = false;\n        }\n        this.cdref.detectChanges();\n    };\n    /**\n     * Component onchage i.e when any of the input properties change\n     * @param changes\n     */\n    SelectDropDownComponent.prototype.ngOnChanges = function (changes) {\n        this.selectedItems = [];\n        // this.searchText = null;\n        this.options = this.options || [];\n        /* istanbul ignore else */\n        if (changes.options) {\n            this.availableItems = this.options.sort(this.config.customComparator).slice();\n        }\n        /* istanbul ignore else */\n        if (changes.value) {\n            /* istanbul ignore else */\n            if (JSON.stringify(changes.value.currentValue) === JSON.stringify([]) ||\n                changes.value.currentValue === \"\" ||\n                changes.value.currentValue === null) {\n                this.availableItems = this.options.sort(this.config.customComparator).slice();\n            }\n        }\n        this.initDropdownValuesAndOptions();\n    };\n    /**\n     * Deselct a selected items\n     * @param item:  item to be deselected\n     * @param index:  index of the item\n     */\n    SelectDropDownComponent.prototype.deselectItem = function (item, index) {\n        var _this = this;\n        this.selectedItems.forEach(function (element, i) {\n            /* istanbul ignore else */\n            if (item === element) {\n                _this.selectedItems.splice(i, 1);\n            }\n        });\n        var sortedItems = this.availableItems.slice();\n        /* istanbul ignore else */\n        if (!this.availableItems.includes(item)) {\n            this.availableItems.push(item);\n            sortedItems = this.availableItems.sort(this.config.customComparator);\n        }\n        this.selectedItems = this.selectedItems.slice();\n        this.availableItems = sortedItems.slice();\n        this.valueChanged();\n        this.resetArrowKeyActiveElement();\n    };\n    /**\n     * Select an item\n     * @param item:  item to be selected\n     * @param index:  index of the item\n     */\n    SelectDropDownComponent.prototype.selectItem = function (item, index) {\n        var _this = this;\n        /* istanbul ignore else */\n        if (!this.multiple) {\n            /* istanbul ignore else */\n            if (this.selectedItems.length > 0) {\n                this.availableItems.push(this.selectedItems[0]);\n            }\n            this.selectedItems = [];\n            this.toggleDropdown = false;\n        }\n        this.availableItems.forEach(function (element, i) {\n            /* istanbul ignore else */\n            if (item === element) {\n                _this.selectedItems.push(item);\n                _this.availableItems.splice(i, 1);\n            }\n        });\n        /* istanbul ignore else */\n        if (this.config.clearOnSelection) {\n            this.searchText = null;\n        }\n        this.selectedItems = this.selectedItems.slice();\n        this.availableItems = this.availableItems.slice();\n        this.selectedItems.sort(this.config.customComparator);\n        this.availableItems.sort(this.config.customComparator);\n        // this.searchText = null;\n        this.valueChanged();\n        this.resetArrowKeyActiveElement();\n    };\n    /**\n     * When selected items changes trigger the chaange back to parent\n     */\n    SelectDropDownComponent.prototype.valueChanged = function () {\n        this.writeValue(this.selectedItems, true);\n        // this.valueChange.emit(this.value);\n        this.change.emit({ value: this.value });\n        this.setSelectedDisplayText();\n    };\n    /**\n     * Toggle the dropdownlist on/off\n     */\n    SelectDropDownComponent.prototype.toggleSelectDropdown = function () {\n        this.toggleDropdown = !this.toggleDropdown;\n        if (this.toggleDropdown) {\n            this.open.emit();\n        }\n        else {\n            this.searchText = null;\n            this.close.emit();\n        }\n        this.resetArrowKeyActiveElement();\n    };\n    /**\n     * The change handler for search text\n     */\n    SelectDropDownComponent.prototype.searchTextChanged = function () {\n        this.searchChange.emit(this.searchText);\n    };\n    SelectDropDownComponent.prototype.changeSearchText = function ($event) {\n        $event.stopPropagation();\n    };\n    /**\n     * initialize the config and other properties\n     */\n    SelectDropDownComponent.prototype.initDropdownValuesAndOptions = function () {\n        var _this = this;\n        var config = {\n            displayKey: \"description\",\n            height: \"auto\",\n            search: false,\n            placeholder: \"Select\",\n            searchPlaceholder: \"Search...\",\n            limitTo: 0,\n            customComparator: undefined,\n            noResultsFound: \"No results found!\",\n            moreText: \"more\",\n            searchOnKey: null,\n            clearOnSelection: false,\n            inputDirection: \"ltr\",\n        };\n        /* istanbul ignore else */\n        if (this.config === \"undefined\" || Object.keys(this.config).length === 0) {\n            this.config = __assign({}, config);\n        }\n        for (var _i = 0, _a = Object.keys(config); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.config[key] = this.config[key] ? this.config[key] : config[key];\n        }\n        this.config = __assign({}, this.config);\n        // Adding placeholder in config as default param\n        this.selectedDisplayText = this.config[\"placeholder\"];\n        /* istanbul ignore else */\n        if (this.value !== \"\" && typeof this.value !== \"undefined\") {\n            if (Array.isArray(this.value)) {\n                this.selectedItems = this.value;\n            }\n            else if (this.value !== \"\" && this.value !== null) {\n                this.selectedItems[0] = this.value;\n            }\n            else {\n                this.selectedItems = [];\n                this.value = [];\n            }\n            this.selectedItems.forEach(function (item) {\n                var ind = _this.availableItems.findIndex(function (aItem) { return JSON.stringify(item) === JSON.stringify(aItem); });\n                if (ind !== -1) {\n                    _this.availableItems.splice(ind, 1);\n                }\n            });\n        }\n        this.setSelectedDisplayText();\n    };\n    /**\n     * set the text to be displayed\n     */\n    SelectDropDownComponent.prototype.setSelectedDisplayText = function () {\n        var text = this.selectedItems[0];\n        /* istanbul ignore else */\n        if (typeof this.selectedItems[0] === \"object\") {\n            text = this.config.displayFn ? this.config.displayFn(this.selectedItems[0]) : this.selectedItems[0][this.config.displayKey];\n        }\n        if (this.multiple && this.selectedItems.length > 0) {\n            this.selectedDisplayText =\n                this.selectedItems.length === 1\n                    ? text\n                    : text +\n                        (\" + \" + (this.selectedItems.length - 1) + \" \" + this.config.moreText);\n        }\n        else {\n            this.selectedDisplayText =\n                this.selectedItems.length === 0 ? this.config.placeholder : text;\n        }\n    };\n    /**\n     * Event handler for arrow key up event thats focuses on a item\n     */\n    SelectDropDownComponent.prototype.onArrowKeyUp = function () {\n        /* istanbul ignore else */\n        if (this.focusedItemIndex === 0) {\n            this.focusedItemIndex = this.availableItems.length - 1;\n            return;\n        }\n        /* istanbul ignore else */\n        if (this.onArrowKey()) {\n            this.focusedItemIndex--;\n        }\n    };\n    /**\n     * Event handler for arrow key down event thats focuses on a item\n     */\n    SelectDropDownComponent.prototype.onArrowKeyDown = function () {\n        /* istanbul ignore else */\n        if (this.focusedItemIndex === this.availableItems.length - 1) {\n            this.focusedItemIndex = 0;\n            return;\n        }\n        /* istanbul ignore else */\n        if (this.onArrowKey()) {\n            this.focusedItemIndex++;\n        }\n    };\n    SelectDropDownComponent.prototype.onArrowKey = function () {\n        /* istanbul ignore else */\n        if (this.focusedItemIndex === null) {\n            this.focusedItemIndex = 0;\n            return false;\n        }\n        return true;\n    };\n    /**\n     * will reset the element that is marked active using arrow keys\n     */\n    SelectDropDownComponent.prototype.resetArrowKeyActiveElement = function () {\n        this.focusedItemIndex = null;\n    };\n    SelectDropDownComponent.decorators = [\n        { type: Component, args: [{\n                    selector: \"ngx-select-dropdown\",\n                    template: \"\\n    <div class=\\\"ngx-dropdown-container\\\" tabindex=\\\"0\\\">\\n        <button type=\\\"button\\\" tabindex=\\\"-1\\\" class=\\\"ngx-dropdown-button\\\" [ngClass]=\\\"{'ngx-disabled':disabled}\\\"\\n            [disabled]=\\\"disabled\\\" (click)=\\\"toggleSelectDropdown()\\\">\\n            <span class=\\\"display-text\\\">{{selectedDisplayText}} </span>\\n            <span class=\\\"nsdicon-angle-down\\\"></span>\\n        </button>\\n        <div class=\\\"ngx-dropdown-list-container\\\" *ngIf=\\\"toggleDropdown\\\" [style.maxHeight]=\\\"config.height\\\">\\n            <div class=\\\"search-container\\\" *ngIf=\\\"config.search\\\">\\n                <input (change)=\\\"changeSearchText($event)\\\" [style.direction]=\\\"config.inputDirection\\\" name=\\\"search-text\\\"\\n                    (input)=\\\"searchTextChanged()\\\" [(ngModel)]=\\\"searchText\\\" tabindex=\\\"-1\\\" autocomplete=\\\"off\\\" />\\n                <label [ngClass]=\\\"{'active': searchText}\\\">\\n                    <span class=\\\"nsdicon-search\\\"></span> {{config.searchPlaceholder}}</label>\\n            </div>\\n            <ul class=\\\"selected-items\\\">\\n                <li tabindex=\\\"-1\\\" *ngFor=\\\"let selected of selectedItems;let i = index\\\" (click)=\\\"deselectItem(selected,i)\\\">\\n                    <span class=\\\"nsdicon-close\\\">x</span>\\n                    <span>\\n                        {{config.displayFn ? config.displayFn(selected) : (selected[config.displayKey] || selected)}}\\n                    </span>\\n                </li>\\n            </ul>\\n            <hr *ngIf=\\\"selectedItems.length > 0 && availableItems.length > 0\\\" />\\n            <ul class=\\\"available-items\\\">\\n                <li #availableOption\\n                    *ngFor=\\\"let item of availableItems| filterBy: searchText : config.searchOnKey | limitTo : config.limitTo;let i = index\\\"\\n                    tabindex=\\\"-1\\\" [ngClass]=\\\"{'active': focusedItemIndex == i && !item.disabled, 'disabled': item.disabled}\\\"\\n                    (click)=\\\"selectItem(item,i)\\\">\\n                    {{config.displayFn ? config.displayFn(item) : (item[config.displayKey] || item)}}\\n                </li>\\n                <li *ngIf=\\\"showNotFound\\\">{{config.noResultsFound}}</li>\\n            </ul>\\n        </div>\\n    </div>\\n  \",\n                    styles: [\"\\n    .ngx-dropdown-container{width:100%;position:relative}.ngx-dropdown-container button{display:inline-block;margin-bottom:0;font-weight:400;line-height:1.42857143;vertical-align:middle;touch-action:manipulation;cursor:pointer;user-select:none;border:1px solid #ccc;border-radius:4px;color:#333;background-color:#fff;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;text-align:left}.ngx-dropdown-container button span{display:inline;vertical-align:middle}.ngx-dropdown-container button .nsdicon-angle-down{right:5px;position:relative;float:right}.ngx-dropdown-container button .nsdicon-angle-down::before{border-style:solid;border-width:0.1em 0.1em 0 0;content:\\\"\\\";display:inline-block;height:10px;position:relative;vertical-align:text-top;width:10px;top:0;transform:rotate(135deg)}.ngx-dropdown-container .ngx-dropdown-button{width:100%;min-height:30px;padding:5px 10px 5px 10px;background-color:white}.ngx-dropdown-container .ngx-dropdown-button .display-text{display:inline-block;width:calc(100% - 20px)}.ngx-dropdown-container .ngx-dropdown-list-container{box-sizing:border-box;border:1px solid rgba(0,0,0,0.15);border-radius:4px;padding-left:10px;padding-right:10px;z-index:999999999;width:100%;background-clip:padding-box;background:white;position:absolute;-webkit-box-shadow:5px 5px 5px 0px rgba(0,0,0,0.21);-moz-box-shadow:5px 5px 5px 0px rgba(0,0,0,0.21);box-shadow:5px 5px 5px 0px rgba(0,0,0,0.21);overflow-y:auto}.ngx-dropdown-container .ngx-dropdown-list-container .search-container{position:relative;padding-top:10px;margin-top:5px}.ngx-dropdown-container .ngx-dropdown-list-container .search-container input{background-color:transparent;border:none;border-bottom:1px solid #9e9e9e;border-radius:0;outline:none;height:2rem;width:100%;font-size:13px;margin:0;padding:0;box-shadow:none;box-sizing:content-box;transition:all 0.3s}.ngx-dropdown-container .ngx-dropdown-list-container .search-container input:focus{border-bottom:1px solid #26a69a}.ngx-dropdown-container .ngx-dropdown-list-container .search-container input:focus+label{transform:translateY(-2px) scale(0.8);transform-origin:0 0}.ngx-dropdown-container .ngx-dropdown-list-container .search-container label{color:#9e9e9e;position:absolute;top:0;left:0;height:100%;font-size:1rem;cursor:text;-webkit-transition:-webkit-transform 0.2s ease-out;transition:-webkit-transform 0.2s ease-out;transition:transform 0.2s ease-out;transition:transform 0.2s ease-out, -webkit-transform 0.2s ease-out;-webkit-transform-origin:0% 100%;transform-origin:0% 100%;text-align:initial;transform:translateY(12px);pointer-events:none}.ngx-dropdown-container .ngx-dropdown-list-container .search-container label.active{transform:translateY(-2px) scale(0.8);transform-origin:0 0}.ngx-dropdown-container .ngx-dropdown-list-container ul{margin-top:1rem;margin-bottom:1rem;list-style-type:none;padding-left:0px}.ngx-dropdown-container .ngx-dropdown-list-container ul.selected-items li{background-color:#337ab7;color:white;margin-bottom:2px}.ngx-dropdown-container .ngx-dropdown-list-container ul.selected-items li .nsdicon-close{font-weight:bold;font-size:large}.ngx-dropdown-container .ngx-dropdown-list-container ul.available-items li.active{background-color:#337ab7;color:#ffff}.ngx-dropdown-container .ngx-dropdown-list-container ul li{font-size:inherit;cursor:pointer;display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:normal}.ngx-dropdown-container .ngx-disabled{pointer-events:none;background-color:#e9ecef;opacity:1;cursor:no-drop}\\n  \"],\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(function () { return SelectDropDownComponent; }),\n                            multi: true,\n                        },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    SelectDropDownComponent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef, },\n        { type: ElementRef, },\n    ]; };\n    SelectDropDownComponent.propDecorators = {\n        '_value': [{ type: Input },],\n        'options': [{ type: Input },],\n        'config': [{ type: Input },],\n        'multiple': [{ type: Input },],\n        'disabled': [{ type: Input },],\n        'change': [{ type: Output },],\n        'searchChange': [{ type: Output },],\n        'open': [{ type: Output },],\n        'close': [{ type: Output },],\n        'availableOptions': [{ type: ViewChildren, args: [\"availableOption\",] },],\n        'clickInsideComponent': [{ type: HostListener, args: [\"click\",] },],\n        'blur': [{ type: HostListener, args: [\"blur\", [\"$event\"],] },],\n        'focus': [{ type: HostListener, args: [\"focus\", [\"$event\"],] },],\n        'clickOutsideComponent': [{ type: HostListener, args: [\"document:click\",] },],\n        'KeyPressOutsideComponent': [{ type: HostListener, args: [\"document:keydown\",] },],\n        'handleKeyboardEvent': [{ type: HostListener, args: [\"keydown\", [\"$event\"],] },],\n    };\n    return SelectDropDownComponent;\n}());\nexport { SelectDropDownComponent };\n"]}